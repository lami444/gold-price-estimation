# -*- coding: utf-8 -*-
"""Gold Price Estimation TEST .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bsG1Wf3CAKuy2afoYDLQQJ9EuD8qj5_u

Importing all the necessary **Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import metrics

"""**Data** Collection


"""

from google.colab import drive
#mount korte hobe
#mouting from LAB 5 -
#drive.mount('/content/drive')
gold_data = pd.read_csv('/content/drive/MyDrive/SA-LS/CSE422 - Project /gold_price_data.csv')

gold_data.head(5)

gold_data.tail(5)

gold_data.shape

gold_data.info()

gold_data.isnull()

gold_data.isnull().sum()

# getting the statistical measures of the data
gold_data.describe()

#data describe korbo then positive negative correlation compare korbo, lastly data split and compare with 4 models

#TO BE CONTINUED

correlation = gold_data.corr()

# constructing a heatmap to understand the correlatiom
plt.figure(figsize = (8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f',annot=True, annot_kws={'size':8}, cmap='Greens')

# correlation values of GLD
print(correlation['GLD'])

# checking the distribution of the GLD Price
sns.distplot(gold_data['GLD'],color='green')

X = gold_data.drop(['Date','GLD'],axis=1)
Y = gold_data['GLD']

print(X)

print(Y)

#not this part
from sklearn.model_selection import train_test_split

#x train, y train korbo erpore model gula predict korabo finally error check diye plot korabo
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=2)

X_train

X_test



import sklearn
brand_features = gold_data[['SPX','USO','SLV','EUR/USD']]
x= brand_features.iloc[:,:-1] #selecting rows and columns from a Panda DataFrame using iloc
y= brand_features.iloc[:,-1]
from sklearn.model_selection import train_test_split
x_train,x_test,train,y_test = train_test_split(x,y,test_size= 0.2,random_state=2)

from sklearn.linear_model import LogisticRegression
lreg=LogisticRegression()
lreg.fit(x_train,y_train)
y_pd= lreg.predict(x_test)

sklearn.metrices.accuracy_score(y_test,y_pd) #ekta accuracy rate ashbe which will indicate the parcentage of possible accurate result

from sklearn.metrices import confusion_matrix #usage to evaluate the quality of the output of a classifier on the data set
set_mat = confusion_matrix(y_test,y_pd)
cnfs_matrix= pd.DataFrame(data=set_mat,columns=['assumed=0','assumed=1'],idx= ['real=0','real=1'])
plt.figure(figsize=(8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f',annot=True, annot_kws={'size':8}, cmap='Greens' )